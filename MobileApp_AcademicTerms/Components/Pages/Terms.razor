@page "/terms"
@using MobileApp_AcademicTerms.Models
@using MobileApp_AcademicTerms.Services
@inject DatabaseService DatabaseService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Academic Terms</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="() => NavigateToTermEdit(0)">Add New Term</button>
</div>

@if (terms == null)
{
    <p><em>Loading...</em></p>
}
else if (!terms.Any())
{
    <div class="alert alert-info">
        <p>No terms have been added yet.</p>
    </div>
}
else
{
    <div class="list-group">
        @foreach (var term in terms)
        {
            <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                <div @onclick="() => NavigateToTermCourses(term.Id)" style="cursor:pointer; flex: 1;">
                    <h5 class="mb-1">@term.Title</h5>
                    <small>@term.StartDate.ToShortDateString() - @term.EndDate.ToShortDateString()</small>
                </div>
                <div>
                    <button class="btn btn-outline-primary me-2" @onclick="() => NavigateToTermEdit(term.Id)">Edit</button>
                    <button class="btn btn-outline-danger" @onclick="() => DeleteTerm(term)">Delete</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Term>? terms;

    protected override async Task OnInitializedAsync()
    {
        await LoadTerms();
    }

    private async Task LoadTerms()
    {
        terms = await DatabaseService.GetTermsAsync();
    }

    private void NavigateToTermCourses(int termId)
    {
        NavigationManager.NavigateTo($"/terms/{termId}/courses");
    }

    private void NavigateToTermEdit(int termId)
    {
        if (termId == 0)
        {
            NavigationManager.NavigateTo("/terms/add");
        }
        else
        {
            NavigationManager.NavigateTo($"/terms/edit/{termId}");
        }
    }

    private async Task DeleteTerm(Term term)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the term '{term.Title}'?"))
        {
            await DatabaseService.DeleteTermAsync(term);
            await LoadTerms();
        }
    }
}