
    @page "/courses/{Id:int}"
    @using MobileApp_AcademicTerms.Models
    @using MobileApp_AcademicTerms.Services
    @inject DatabaseService DatabaseService
    @inject NavigationManager NavigationManager
    @inject IJSRuntime JSRuntime

    <h1>Course Details</h1>

    @if (course == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between">
                <h3>@course.Title</h3>
                <button class="btn btn-primary btn-sm" @onclick="EditCourse">Edit</button>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Status:</strong> <span class="badge bg-@GetStatusBadgeColor(course.Status)">@course.Status</span></p>
                        <p><strong>Start Date:</strong> @course.StartDate.ToShortDateString()</p>
                        <p><strong>End Date:</strong> @course.EndDate.ToShortDateString()</p>
                        <p><strong>Notifications:</strong> @(course.NotificationsEnabled ? "Enabled" : "Disabled")</p>
                    </div>
                    <div class="col-md-6">
                        <h4>Instructor Information</h4>
                        <p><strong>Name:</strong> @course.InstructorName</p>
                        <p><strong>Email:</strong> @course.InstructorEmail</p>
                        <p><strong>Phone:</strong> @course.InstructorPhone</p>
                    </div>
                </div>
                
                @if (!string.IsNullOrWhiteSpace(course.Notes))
                {
                    <div class="mt-3">
                        <h4>Notes</h4>
                        <div class="alert alert-secondary">
                            @course.Notes
                        </div>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="ShareNotes">
                            <i class="bi bi-share"></i> Share Notes
                        </button>
                    </div>
                }
            </div>
        </div>

        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3>Assessments</h3>
                <button class="btn btn-primary" @onclick="AddAssessment">Add Assessment</button>
            </div>
            <div class="card-body">
                @if (assessments == null || !assessments.Any())
                {
                    <p>No assessments have been added for this course.</p>
                }
                else
                {
                    <div class="list-group">
                        @foreach (var assessment in assessments)
                        {
                            <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                <div style="flex: 1;">
                                    <h5 class="mb-1">@assessment.Title</h5>
                                    <span class="badge bg-info">@assessment.Type</span>
                                    <small class="d-block">@assessment.StartDate.ToShortDateString() - @assessment.EndDate.ToShortDateString()</small>
                                </div>
                                <div>
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditAssessment(assessment)">Edit</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAssessment(assessment)">Delete</button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        
        <div class="mt-3">
            <button class="btn btn-secondary" @onclick="GoBack">Back to Courses</button>
        </div>
    

    @code {
        [Parameter]
        public int Id { get; set; }
        
        private Course? course;
        private List<Assessment>? assessments;

        protected override async Task OnInitializedAsync()
        {
            await LoadCourse();
            await LoadAssessments();
        }
        
        private async Task LoadCourse()
        {
            course = await DatabaseService.GetCourseAsync(Id);
            if (course == null)
            {
                NavigationManager.NavigateTo("/terms");
            }
        }
        
        private async Task LoadAssessments()
        {
            assessments = await DatabaseService.GetAssessmentsForCourseAsync(Id);
        }
        
        private string GetStatusBadgeColor(string status)
        {
            return status?.ToLower() switch
            {
                "in progress" => "primary",
                "completed" => "success",
                "dropped" => "danger",
                "planned" => "warning",
                _ => "secondary"
            };
        }
        
        private void EditCourse()
        {
            NavigationManager.NavigateTo("/courses/edit/" + Id);
        }
        
        private void AddAssessment()
        {
            NavigationManager.NavigateTo("/courses/" + Id + "/assessments/add");
        }
        
        private void EditAssessment(Assessment assessment)
        {
            NavigationManager.NavigateTo("/assessments/edit/" + assessment.Id);
        }
        
        private async Task DeleteAssessment(Assessment assessment)
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the assessment '{assessment.Title}'?"))
            {
                await DatabaseService.DeleteAssessmentAsync(assessment);
                await LoadAssessments();
            }
        }
        
    private async Task ShareNotes()
    {
        if (course != null && !string.IsNullOrWhiteSpace(course.Notes))
        {
            try
            {
                // Use a JavaScript function to handle the share operation
                await JSRuntime.InvokeVoidAsync("shareContent",
                    $"Notes for {course.Title}",
                    course.Notes);
            }
            catch (Exception ex)
            {
                // Fallback and log exception
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", course.Notes);
                await JSRuntime.InvokeVoidAsync("alert", "Notes copied to clipboard!");
                Console.WriteLine($"Sharing failed: {ex.Message}");
            }
        }
    }

        
        private void GoBack()
        {
            if (course != null)
            {
                NavigationManager.NavigateTo("/terms/" + course.TermId + "/courses");
            }
            else
            {
                NavigationManager.NavigateTo("/terms");
            }
        }
    }
}